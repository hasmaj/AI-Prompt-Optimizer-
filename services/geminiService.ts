
import { GoogleGenAI } from "@google/genai";
import { Model, FewShotExample } from '../types';

if (!process.env.API_KEY) {
    throw new Error("API_KEY environment variable not set");
}

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

export async function optimizePrompt(originalPrompt: string, targetModels: Model[], examples: FewShotExample[]): Promise<string> {
  const modelList = targetModels.join(', ');
  
  let examplesText = '';
  if (examples.length > 0) {
    const formattedExamples = examples
      .filter(e => e.input.trim() && e.output.trim())
      .map(e => `---
EXAMPLE INPUT:
${e.input}

EXAMPLE OPTIMIZED OUTPUT:
${e.output}
---`)
      .join('\n\n');
    
    if (formattedExamples) {
      examplesText = `\n\nYou MUST learn from these examples to understand the desired style and format of the output.\n\n${formattedExamples}`;
    }
  }

  const systemInstruction = `You are a world-class expert in prompt engineering for large language models.
Your task is to rewrite a user's prompt to be optimized for the following AI models: ${modelList}.

Follow these rules strictly:
1.  Analyze the user's original prompt to understand their core intent.
2.  Enhance the prompt by adding clarity, context, constraints, and a clear desired output format.
3.  Ensure the prompt is structured to elicit the most accurate, detailed, and helpful response from the specified models.${examplesText}
4.  The final output MUST ONLY be the optimized prompt text itself. Do not include any pre-amble, explanations, titles, or markdown formatting like \`\`\`. Just return the pure, optimized prompt.`;

  try {
    const response = await ai.models.generateContent({
      model: "gemini-2.5-flash",
      contents: originalPrompt,
      config: {
        systemInstruction: systemInstruction,
        temperature: 0.7,
        topP: 0.95,
      },
    });

    return response.text.trim();
  } catch (error) {
    console.error("Error calling Gemini API:", error);
    if (error instanceof Error) {
        throw new Error(`Failed to optimize prompt: ${error.message}`);
    }
    throw new Error("An unknown error occurred while communicating with the Gemini API.");
  }
}

export async function generateImage(prompt: string, aspectRatio: string = '1:1'): Promise<string> {
  try {
      const response = await ai.models.generateImages({
          model: 'imagen-4.0-generate-001',
          prompt: prompt,
          config: {
              numberOfImages: 1,
              outputMimeType: 'image/png',
              aspectRatio: aspectRatio,
          },
      });

      if (!response.generatedImages || response.generatedImages.length === 0) {
          throw new Error("No image was generated by the API.");
      }

      const base64ImageBytes: string = response.generatedImages[0].image.imageBytes;
      return base64ImageBytes;
  } catch (error) {
      console.error("Error calling Gemini API for image generation:", error);
      if (error instanceof Error) {
          throw new Error(`Failed to generate image: ${error.message}`);
      }
      throw new Error("An unknown error occurred while generating the image.");
  }
}

export async function analyzeImage(base64ImageData: string, mimeType: string, prompt: string): Promise<string> {
  try {
    const imagePart = {
      inlineData: {
        data: base64ImageData,
        mimeType: mimeType,
      },
    };

    const textPart = {
      text: prompt,
    };

    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash',
      contents: { parts: [imagePart, textPart] },
    });

    return response.text.trim();
  } catch (error) {
    console.error("Error calling Gemini API for image analysis:", error);
    if (error instanceof Error) {
        throw new Error(`Failed to analyze image: ${error.message}`);
    }
    throw new Error("An unknown error occurred while analyzing the image.");
  }
}
